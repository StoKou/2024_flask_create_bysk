{"ast":null,"code":"import { ref } from \"vue\";\nexport default {\n  name: \"PredictPage\",\n  setup() {\n    const fileInput = ref(null);\n    const loading = ref(false);\n    const results = ref([]); // 用于存储后端返回的列表\n    const selectedModel = ref(\"model1\");\n    const onFileChange = event => {\n      const selectedFile = event.target.files[0];\n      console.log(\"Selected file:\", selectedFile.name);\n    };\n    async function handleFormSubmit() {\n      loading.value = true;\n      try {\n        const formData = new FormData();\n        formData.append(\"file\", fileInput.value.files[0]);\n        let response = await fetch(`/api/predict/${selectedModel.value}`, {\n          method: \"POST\",\n          body: formData\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        results.value = await response.json(); // 假设后端返回的是JSON格式的列表\n        console.log(\"Prediction results:\", results.value);\n        loading.value = false;\n      } catch (error) {\n        console.error(\"Error simulating prediction:\", error);\n        loading.value = false;\n        alert(\"模拟预测失败，请检查上传的文件格式或稍后再试...\");\n      }\n    }\n    return {\n      fileInput,\n      loading,\n      results,\n      handleFormSubmit,\n      onFileChange,\n      selectedModel\n    };\n  }\n};","map":{"version":3,"names":["ref","name","setup","fileInput","loading","results","selectedModel","onFileChange","event","selectedFile","target","files","console","log","handleFormSubmit","value","formData","FormData","append","response","fetch","method","body","ok","Error","status","json","error","alert"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\views\\PredictPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"predict-page\">\r\n    <header class=\"page-header\">\r\n      <h1>实验数据预测</h1>\r\n    </header>\r\n    <section class=\"predict-content content-container\">\r\n      <form class=\"predict-form\" @submit.prevent=\"handleFormSubmit\">\r\n        <div class=\"form-group\">\r\n          <input type=\"file\" ref=\"fileInput\" @change=\"onFileChange\" />\r\n          <label class=\"file-label\">选择文件</label>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label class=\"radio-label\">\r\n            <input\r\n              type=\"radio\"\r\n              name=\"model\"\r\n              value=\"model1\"\r\n              v-model=\"selectedModel\"\r\n            />\r\n            Model 1\r\n          </label>\r\n          <label class=\"radio-label\">\r\n            <input\r\n              type=\"radio\"\r\n              name=\"model\"\r\n              value=\"model2\"\r\n              v-model=\"selectedModel\"\r\n            />\r\n            Model 2\r\n          </label>\r\n        </div>\r\n        <button type=\"submit\" class=\"predict-button\">确定</button>\r\n      </form>\r\n      <div v-if=\"loading\" class=\"loading-message\">\r\n        <p>正在模拟预测...</p>\r\n      </div>\r\n      <div v-if=\"results && !loading\" class=\"prediction-result\">\r\n        <h3>模拟预测结果列表：</h3>\r\n        <ul>\r\n          <li v-for=\"(result, index) in results\" :key=\"index\">\r\n            {{ result }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from \"vue\";\r\n\r\nexport default {\r\n  name: \"PredictPage\",\r\n  setup() {\r\n    const fileInput = ref(null);\r\n    const loading = ref(false);\r\n    const results = ref([]); // 用于存储后端返回的列表\r\n    const selectedModel = ref(\"model1\");\r\n\r\n    const onFileChange = (event) => {\r\n      const selectedFile = event.target.files[0];\r\n      console.log(\"Selected file:\", selectedFile.name);\r\n    };\r\n\r\n    async function handleFormSubmit() {\r\n      loading.value = true;\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", fileInput.value.files[0]);\r\n\r\n        let response = await fetch(`/api/predict/${selectedModel.value}`, {\r\n          method: \"POST\",\r\n          body: formData,\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        results.value = await response.json(); // 假设后端返回的是JSON格式的列表\r\n        console.log(\"Prediction results:\", results.value);\r\n\r\n        loading.value = false;\r\n      } catch (error) {\r\n        console.error(\"Error simulating prediction:\", error);\r\n        loading.value = false;\r\n        alert(\"模拟预测失败，请检查上传的文件格式或稍后再试...\");\r\n      }\r\n    }\r\n\r\n    return {\r\n      fileInput,\r\n      loading,\r\n      results,\r\n      handleFormSubmit,\r\n      onFileChange,\r\n      selectedModel,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.predict-page {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  padding: 2rem;\r\n}\r\n\r\n.page-header {\r\n  text-align: center;\r\n}\r\n\r\n.content-container {\r\n  width: 80%;\r\n  max-width: 800px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.predict-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.file-label {\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.radio-label {\r\n  display: inline-block;\r\n  cursor: pointer;\r\n}\r\n\r\n.predict-button {\r\n  width: 100%;\r\n  padding: 0.5rem 1rem;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n}\r\n\r\n.loading-message {\r\n  text-align: center;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.prediction-result {\r\n  width: 100%;\r\n  text-align: center;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.prediction-result ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.prediction-result li {\r\n  margin: 0.5rem 0;\r\n}\r\n</style>"],"mappings":"AAiDA,SAASA,GAAE,QAAS,KAAK;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAKA,CAAA,EAAG;IACN,MAAMC,SAAQ,GAAIH,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAMI,OAAM,GAAIJ,GAAG,CAAC,KAAK,CAAC;IAC1B,MAAMK,OAAM,GAAIL,GAAG,CAAC,EAAE,CAAC,EAAE;IACzB,MAAMM,aAAY,GAAIN,GAAG,CAAC,QAAQ,CAAC;IAEnC,MAAMO,YAAW,GAAKC,KAAK,IAAK;MAC9B,MAAMC,YAAW,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAC1CC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,YAAY,CAACR,IAAI,CAAC;IAClD,CAAC;IAED,eAAea,gBAAgBA,CAAA,EAAG;MAChCV,OAAO,CAACW,KAAI,GAAI,IAAI;MACpB,IAAI;QACF,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEf,SAAS,CAACY,KAAK,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;QAEjD,IAAIQ,QAAO,GAAI,MAAMC,KAAK,CAAE,gBAAed,aAAa,CAACS,KAAM,EAAC,EAAE;UAChEM,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEN;QACR,CAAC,CAAC;QAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBL,QAAQ,CAACM,MAAO,EAAC,CAAC;QAC3D;QAEApB,OAAO,CAACU,KAAI,GAAI,MAAMI,QAAQ,CAACO,IAAI,CAAC,CAAC,EAAE;QACvCd,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAER,OAAO,CAACU,KAAK,CAAC;QAEjDX,OAAO,CAACW,KAAI,GAAI,KAAK;MACvB,EAAE,OAAOY,KAAK,EAAE;QACdf,OAAO,CAACe,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDvB,OAAO,CAACW,KAAI,GAAI,KAAK;QACrBa,KAAK,CAAC,2BAA2B,CAAC;MACpC;IACF;IAEA,OAAO;MACLzB,SAAS;MACTC,OAAO;MACPC,OAAO;MACPS,gBAAgB;MAChBP,YAAY;MACZD;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}