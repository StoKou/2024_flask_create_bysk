{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chartCanvas\",\n  width: \"600\",\n  height: \"400\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavigationBar = _resolveComponent(\"NavigationBar\");\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  const _component_el_tab_pane = _resolveComponent(\"el-tab-pane\");\n  const _component_el_tabs = _resolveComponent(\"el-tabs\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_NavigationBar), _createVNode(_component_el_tabs, {\n    type: \"border-card\",\n    modelValue: $data.activeName,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.activeName = $event),\n    onTabClick: $options.handleClick\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_tab_pane, {\n      label: \"原始数据展示\",\n      name: \"first\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", null, [_createCommentVNode(\" 使用Element UI的el-table展示二维数据 \"), _createVNode(_component_el_table, {\n        data: $data.tableData,\n        style: {\n          \"width\": \"100%\"\n        }\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_table_column, {\n          prop: \"key\",\n          label: \"序号\",\n          width: \"180\"\n        }), _createVNode(_component_el_table_column, {\n          prop: \"value\",\n          label: \"值\"\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"data\"]), _createCommentVNode(\" 假设使用chart.js进行作图，需要先安装chart.js及vue-chartjs插件 \"), _createElementVNode(\"canvas\", _hoisted_1, null, 512 /* NEED_PATCH */)])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_tab_pane, {\n      label: \"数据预处理\",\n      name: \"second\"\n    }), _createVNode(_component_el_tab_pane, {\n      label: \"预测结果\",\n      name: \"third\"\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"onTabClick\"])]);\n}","map":{"version":3,"names":["ref","width","height","_createElementBlock","_createVNode","_component_NavigationBar","_component_el_tabs","type","modelValue","$data","activeName","_cache","$event","onTabClick","$options","handleClick","default","_withCtx","_component_el_tab_pane","label","name","_createElementVNode","_createCommentVNode","_component_el_table","data","tableData","style","_component_el_table_column","prop","_","_hoisted_1"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\views\\Home.vue"],"sourcesContent":["<template>\n  <div>\n    <NavigationBar />\n    <el-tabs type=\"border-card\" v-model=\"activeName\" @tab-click=\"handleClick\">\n      <el-tab-pane label=\"原始数据展示\" name=\"first\">\n        <div>\n          <!-- 使用Element UI的el-table展示二维数据 -->\n          <el-table :data=\"tableData\" style=\"width: 100%\">\n            <el-table-column prop=\"key\" label=\"序号\" width=\"180\"></el-table-column>\n            <el-table-column prop=\"value\" label=\"值\"></el-table-column>\n          </el-table>\n\n          <!-- 假设使用chart.js进行作图，需要先安装chart.js及vue-chartjs插件 -->\n          <canvas ref=\"chartCanvas\" width=\"600\" height=\"400\"></canvas>\n        </div>\n      </el-tab-pane>\n      <el-tab-pane label=\"数据预处理\" name=\"second\"></el-tab-pane>\n      <el-tab-pane label=\"预测结果\" name=\"third\"></el-tab-pane>\n    </el-tabs>\n  </div>\n</template>\n\n<script>\nimport NavigationBar from './NavigationBar.vue';\n// 若使用chart.js，需导入相关依赖\n// import Chart from 'chart.js/auto';\n// import { Line } from 'vue-chartjs';\n\nexport default {\n  name:\"HomePage\",\n  components: {\n    NavigationBar\n  },\n  data() {\n    return {\n      activeName: 'second',\n      tableData: [\n        { key: 'A', value: 1 },\n        { key: 'B', value: 2 },\n        { key: 'C', value: 3 },\n        { key: 'D', value: 4 },\n        { key: 'E', value: 5 },\n        { key: 'F', value: 6 },\n        { key: 'G', value: 7 },\n        { key: 'H', value: 8 },\n        // 更多数据...\n      ],\n      // 假设这是chart.js所需的图表数据和配置\n      chartData: {\n        labels: [], // X轴标签\n        datasets: [{\n          label: '数据集',\n          data: [], // Y轴数据\n          // 更多配置项...\n        }]\n      },\n      chartOptions: {} // chart.js的图表配置项\n    };\n  },\n  methods: {\n    handleClick(tab, event) {\n      console.log(tab, event);\n    },\n    // 初始化chart.js图表（在mounted钩子函数中调用）\n    initChart() {\n      // 注意：此处仅做示例，实际需要确保已经正确安装和引入chart.js及vue-chartjs\n      // const ctx = this.$refs.chartCanvas.getContext('2d');\n      // const myChart = new Chart(ctx, {\n      //   type: 'line',\n      //   data: this.chartData,\n      //   options: this.chartOptions\n      // });\n    }\n  },\n  mounted() {\n    // 在组件挂载后初始化图表\n    // this.initChart();\n  }\n};\n</script>\n\n<style>\n.el-tabs__nav-wrap {\n  display: flex;\n  justify-content: center;\n}\n</style>"],"mappings":";;EAakBA,GAAG,EAAC,aAAa;EAACC,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;;;;;;;uBAZrDC,mBAAA,CAkBM,cAjBJC,YAAA,CAAiBC,wBAAA,GACjBD,YAAA,CAeUE,kBAAA;IAfDC,IAAI,EAAC,aAAa;IAH/BC,UAAA,EAGyCC,KAAA,CAAAC,UAAU;IAHnD,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAGyCH,KAAA,CAAAC,UAAU,GAAAE,MAAA;IAAGC,UAAS,EAAEC,QAAA,CAAAC;;IAHjEC,OAAA,EAAAC,QAAA,CAIM,MAWc,CAXdb,YAAA,CAWcc,sBAAA;MAXDC,KAAK,EAAC,QAAQ;MAACC,IAAI,EAAC;;MAJvCJ,OAAA,EAAAC,QAAA,CAKQ,MASM,CATNI,mBAAA,CASM,cARJC,mBAAA,iCAAoC,EACpClB,YAAA,CAGWmB,mBAAA;QAHAC,IAAI,EAAEf,KAAA,CAAAgB,SAAS;QAAEC,KAAmB,EAAnB;UAAA;QAAA;;QAPtCV,OAAA,EAAAC,QAAA,CAQY,MAAqE,CAArEb,YAAA,CAAqEuB,0BAAA;UAApDC,IAAI,EAAC,KAAK;UAACT,KAAK,EAAC,IAAI;UAAClB,KAAK,EAAC;YAC7CG,YAAA,CAA0DuB,0BAAA;UAAzCC,IAAI,EAAC,OAAO;UAACT,KAAK,EAAC;;QAThDU,CAAA;mCAYUP,mBAAA,kDAAqD,EACrDD,mBAAA,CAA4D,UAA5DS,UAA4D,8B;MAbtED,CAAA;QAgBMzB,YAAA,CAAuDc,sBAAA;MAA1CC,KAAK,EAAC,OAAO;MAACC,IAAI,EAAC;QAChChB,YAAA,CAAqDc,sBAAA;MAAxCC,KAAK,EAAC,MAAM;MAACC,IAAI,EAAC;;IAjBrCS,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}