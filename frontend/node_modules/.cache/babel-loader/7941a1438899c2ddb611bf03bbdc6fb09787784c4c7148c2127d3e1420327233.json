{"ast":null,"code":"// 导入ECharts库和Axios库\nimport * as echarts from 'echarts';\nimport axios from 'axios';\nexport default {\n  name: 'LineChartComponent',\n  data() {\n    return {\n      chartInstance: null,\n      chartOptions: {\n        name: ''\n      },\n      categories: [],\n      values: [],\n      selectedCategory: '' // 用于v-model绑定的目录选择器\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const response = await axios.get('/api/expimage/get_1', {\n          params: {\n            category: this.selectedCategory\n          } // 传递选中的目录作为参数\n        });\n        if (response.data) {\n          this.chartOptions.name = response.data.name; // 设置图表名称\n          this.categories = response.data.categories;\n          this.values = response.data.values;\n          this.initChart();\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    initChart() {\n      this.chartInstance = echarts.init(this.$refs.chart);\n      this.chartOptions = {\n        title: {\n          text: this.chartOptions.name\n        },\n        // 设置图表标题\n        xAxis: {\n          type: 'category',\n          data: this.categories\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          data: this.values,\n          type: 'line'\n        }]\n      };\n      this.chartInstance.setOption(this.chartOptions);\n    },\n    handleCategoryChange() {\n      this.fetchData(); // 当目录改变时重新获取数据\n    }\n  }\n};","map":{"version":3,"names":["echarts","axios","name","data","chartInstance","chartOptions","categories","values","selectedCategory","mounted","fetchData","methods","response","get","params","category","initChart","error","console","init","$refs","chart","title","text","xAxis","type","yAxis","series","setOption","handleCategoryChange"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\views\\Echartsdemo.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <!-- 添加一个标题显示name -->\r\n    <h1 v-if=\"chartOptions.name\">{{ chartOptions.name }}</h1>\r\n    <!-- 定义一个div作为ECharts图表容器，通过ref属性绑定到Vue实例上 -->\r\n    <div ref=\"chart\" style=\"width: 100%; height: 400px;\"></div>\r\n    <!-- 添加目录选择器 -->\r\n    <select v-model=\"selectedCategory\" @change=\"handleCategoryChange\">\r\n      <option disabled value=\"\">请选择目录</option>\r\n      <option v-for=\"category in categories\" :key=\"category\">{{ category }}</option>\r\n    </select>\r\n    <!-- 添加刷新按钮 -->\r\n    <button @click=\"fetchData\">刷新</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 导入ECharts库和Axios库\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'LineChartComponent',\r\n  data() {\r\n    return {\r\n      chartInstance: null,\r\n      chartOptions: { name: '' },\r\n      categories: [],\r\n      values: [],\r\n      selectedCategory: '', // 用于v-model绑定的目录选择器\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchData();\r\n  },\r\n  methods: {\r\n    async fetchData() {\r\n      try {\r\n        const response = await axios.get('/api/expimage/get_1', {\r\n          params: { category: this.selectedCategory } // 传递选中的目录作为参数\r\n        });\r\n        if (response.data) {\r\n          this.chartOptions.name = response.data.name; // 设置图表名称\r\n          this.categories = response.data.categories;\r\n          this.values = response.data.values;\r\n          this.initChart();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    },\r\n    initChart() {\r\n      this.chartInstance = echarts.init(this.$refs.chart);\r\n      this.chartOptions = {\r\n        title: { text: this.chartOptions.name }, // 设置图表标题\r\n        xAxis: { type: 'category', data: this.categories },\r\n        yAxis: { type: 'value' },\r\n        series: [{ data: this.values, type: 'line' }],\r\n      };\r\n      this.chartInstance.setOption(this.chartOptions);\r\n    },\r\n    handleCategoryChange() {\r\n      this.fetchData(); // 当目录改变时重新获取数据\r\n    },\r\n  },\r\n};\r\n\r\n</script>\r\n\r\n<style scoped>\r\n#app {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  height: 100vh;\r\n  justify-content: space-around;\r\n}\r\nh1 {\r\n  margin-bottom: 20px; /* 给标题一些空间 */\r\n}\r\n</style>"],"mappings":"AAiBA;AACA,OAAO,KAAKA,OAAM,MAAO,SAAS;AAClC,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,oBAAoB;EAC1BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,IAAI;MACnBC,YAAY,EAAE;QAAEH,IAAI,EAAE;MAAG,CAAC;MAC1BI,UAAU,EAAE,EAAE;MACdC,MAAM,EAAE,EAAE;MACVC,gBAAgB,EAAE,EAAE,CAAE;IACxB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,SAASA,CAAA,EAAG;MAChB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMX,KAAK,CAACY,GAAG,CAAC,qBAAqB,EAAE;UACtDC,MAAM,EAAE;YAAEC,QAAQ,EAAE,IAAI,CAACP;UAAiB,EAAE;QAC9C,CAAC,CAAC;QACF,IAAII,QAAQ,CAACT,IAAI,EAAE;UACjB,IAAI,CAACE,YAAY,CAACH,IAAG,GAAIU,QAAQ,CAACT,IAAI,CAACD,IAAI,EAAE;UAC7C,IAAI,CAACI,UAAS,GAAIM,QAAQ,CAACT,IAAI,CAACG,UAAU;UAC1C,IAAI,CAACC,MAAK,GAAIK,QAAQ,CAACT,IAAI,CAACI,MAAM;UAClC,IAAI,CAACS,SAAS,CAAC,CAAC;QAClB;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACDD,SAASA,CAAA,EAAG;MACV,IAAI,CAACZ,aAAY,GAAIJ,OAAO,CAACmB,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC;MACnD,IAAI,CAAChB,YAAW,GAAI;QAClBiB,KAAK,EAAE;UAAEC,IAAI,EAAE,IAAI,CAAClB,YAAY,CAACH;QAAK,CAAC;QAAE;QACzCsB,KAAK,EAAE;UAAEC,IAAI,EAAE,UAAU;UAAEtB,IAAI,EAAE,IAAI,CAACG;QAAW,CAAC;QAClDoB,KAAK,EAAE;UAAED,IAAI,EAAE;QAAQ,CAAC;QACxBE,MAAM,EAAE,CAAC;UAAExB,IAAI,EAAE,IAAI,CAACI,MAAM;UAAEkB,IAAI,EAAE;QAAO,CAAC;MAC9C,CAAC;MACD,IAAI,CAACrB,aAAa,CAACwB,SAAS,CAAC,IAAI,CAACvB,YAAY,CAAC;IACjD,CAAC;IACDwB,oBAAoBA,CAAA,EAAG;MACrB,IAAI,CAACnB,SAAS,CAAC,CAAC,EAAE;IACpB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}