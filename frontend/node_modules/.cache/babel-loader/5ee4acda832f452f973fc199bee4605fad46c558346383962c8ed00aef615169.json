{"ast":null,"code":"import * as echarts from 'echarts';\nimport { fetchData } from '/api/expimage'; // 假设这是你的后端接口文件路径\n\nexport default {\n  name: 'EchartsDemo',\n  data() {\n    return {\n      chartInstance: null,\n      options: {},\n      dataFromServer: []\n    };\n  },\n  async created() {\n    // 异步获取后端数据\n    const response = await fetchData();\n    this.dataFromServer = response.data; // 假设response.data是一个[{ time, num }]形式的数组\n\n    // 根据获取到的数据构建ECharts的option\n    this.options = {\n      xAxis: {\n        type: 'category',\n        data: this.dataFromServer.map(item => item.time)\n      },\n      yAxis: {\n        type: 'value'\n      },\n      series: [{\n        data: this.dataFromServer.map(item => item.num),\n        type: 'line'\n      }]\n    };\n\n    // 初始化ECharts实例并在数据获取完成后绘制图表\n    this.initChart();\n  },\n  mounted() {\n    // 如果created钩子中还未获取到数据，则在mounted阶段先挂载容器，等待数据加载完成再绘制图表\n    if (this.dataFromServer.length > 0) {\n      this.initChart();\n    }\n  },\n  methods: {\n    initChart() {\n      this.chartInstance = echarts.init(this.$refs.chart);\n      this.chartInstance.setOption(this.options);\n      window.addEventListener('resize', this.onResize);\n    },\n    onResize() {\n      if (this.chartInstance) {\n        this.chartInstance.resize();\n      }\n    },\n    destroyed() {\n      window.removeEventListener('resize', this.onResize);\n      this.chartInstance.dispose();\n    }\n  }\n};","map":{"version":3,"names":["echarts","fetchData","name","data","chartInstance","options","dataFromServer","created","response","xAxis","type","map","item","time","yAxis","series","num","initChart","mounted","length","methods","init","$refs","chart","setOption","window","addEventListener","onResize","resize","destroyed","removeEventListener","dispose"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\components\\Echartsdemo.vue"],"sourcesContent":["<template>\r\n  <div ref=\"chart\" :style=\"{width: '100%', height: '400px'}\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport { fetchData } from '/api/expimage'; // 假设这是你的后端接口文件路径\r\n\r\nexport default {\r\n  name: 'EchartsDemo',\r\n  data() {\r\n    return {\r\n      chartInstance: null,\r\n      options: {},\r\n      dataFromServer: []\r\n    };\r\n  },\r\n  async created() {\r\n    // 异步获取后端数据\r\n    const response = await fetchData();\r\n    this.dataFromServer = response.data; // 假设response.data是一个[{ time, num }]形式的数组\r\n\r\n    // 根据获取到的数据构建ECharts的option\r\n    this.options = {\r\n      xAxis: {\r\n        type: 'category',\r\n        data: this.dataFromServer.map(item => item.time)\r\n      },\r\n      yAxis: {\r\n        type: 'value'\r\n      },\r\n      series: [{\r\n        data: this.dataFromServer.map(item => item.num),\r\n        type: 'line'\r\n      }]\r\n    };\r\n\r\n    // 初始化ECharts实例并在数据获取完成后绘制图表\r\n    this.initChart();\r\n  },\r\n  mounted() {\r\n    // 如果created钩子中还未获取到数据，则在mounted阶段先挂载容器，等待数据加载完成再绘制图表\r\n    if (this.dataFromServer.length > 0) {\r\n      this.initChart();\r\n    }\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      this.chartInstance = echarts.init(this.$refs.chart);\r\n      this.chartInstance.setOption(this.options);\r\n\r\n      window.addEventListener('resize', this.onResize);\r\n    },\r\n    onResize() {\r\n      if (this.chartInstance) {\r\n        this.chartInstance.resize();\r\n      }\r\n    },\r\n    destroyed() {\r\n      window.removeEventListener('resize', this.onResize);\r\n      this.chartInstance.dispose();\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":"AAKA,OAAO,KAAKA,OAAM,MAAO,SAAS;AAClC,SAASC,SAAQ,QAAS,eAAe,EAAE;;AAE3C,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,IAAI;MACnBC,OAAO,EAAE,CAAC,CAAC;MACXC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd;IACA,MAAMC,QAAO,GAAI,MAAMP,SAAS,CAAC,CAAC;IAClC,IAAI,CAACK,cAAa,GAAIE,QAAQ,CAACL,IAAI,EAAE;;IAErC;IACA,IAAI,CAACE,OAAM,GAAI;MACbI,KAAK,EAAE;QACLC,IAAI,EAAE,UAAU;QAChBP,IAAI,EAAE,IAAI,CAACG,cAAc,CAACK,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,IAAI;MACjD,CAAC;MACDC,KAAK,EAAE;QACLJ,IAAI,EAAE;MACR,CAAC;MACDK,MAAM,EAAE,CAAC;QACPZ,IAAI,EAAE,IAAI,CAACG,cAAc,CAACK,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACI,GAAG,CAAC;QAC/CN,IAAI,EAAE;MACR,CAAC;IACH,CAAC;;IAED;IACA,IAAI,CAACO,SAAS,CAAC,CAAC;EAClB,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,IAAI,CAACZ,cAAc,CAACa,MAAK,GAAI,CAAC,EAAE;MAClC,IAAI,CAACF,SAAS,CAAC,CAAC;IAClB;EACF,CAAC;EACDG,OAAO,EAAE;IACPH,SAASA,CAAA,EAAG;MACV,IAAI,CAACb,aAAY,GAAIJ,OAAO,CAACqB,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC;MACnD,IAAI,CAACnB,aAAa,CAACoB,SAAS,CAAC,IAAI,CAACnB,OAAO,CAAC;MAE1CoB,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC;IAClD,CAAC;IACDA,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAACvB,aAAa,EAAE;QACtB,IAAI,CAACA,aAAa,CAACwB,MAAM,CAAC,CAAC;MAC7B;IACF,CAAC;IACDC,SAASA,CAAA,EAAG;MACVJ,MAAM,CAACK,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAACH,QAAQ,CAAC;MACnD,IAAI,CAACvB,aAAa,CAAC2B,OAAO,CAAC,CAAC;IAC9B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}