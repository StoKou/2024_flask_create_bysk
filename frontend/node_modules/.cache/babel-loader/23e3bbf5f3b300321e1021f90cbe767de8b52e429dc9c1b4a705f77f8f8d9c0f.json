{"ast":null,"code":"// 导入ECharts库和Axios库\nimport * as echarts from 'echarts';\nimport axios from 'axios';\n\n// 定义Vue组件\nexport default {\n  // 给组件命名\n  name: 'LineChartComponent',\n  // 初始化组件状态数据\n  data() {\n    return {\n      // 存储ECharts实例的引用\n      chartInstance: null,\n      // 存储图表配置项\n      chartOptions: {},\n      // 存储类别标签数据\n      categories: [],\n      // 存储数值型数据\n      values: []\n    };\n  },\n  // 在组件挂载完成后执行fetchData方法获取数据\n  mounted() {\n    this.fetchData();\n  },\n  // 定义组件的方法\n  methods: {\n    // 异步获取数据的方法\n    async fetchData() {\n      try {\n        // 使用Axios发送GET请求到'/api/expimage'接口\n        const response = await axios.get('/api/expimage');\n\n        // 如果请求成功并且返回了有效数据\n        if (response.data) {\n          // 将接收到的类别数据赋值给categories\n          this.categories = response.data.categories;\n          // 将接收到的数值数据赋值给values\n          this.values = response.data.values;\n\n          // 数据准备好后初始化并绘制图表\n          this.initChart();\n        }\n      } catch (error) {\n        // 如果请求过程中发生错误，打印错误信息\n        console.error('Error fetching data:', error);\n      }\n    },\n    // 初始化并设置ECharts图表的方法\n    initChart() {\n      // 使用ECharts初始化图表实例，传入已绑定的DOM元素ref=\"chart\"\n      this.chartInstance = echarts.init(this.$refs.chart);\n\n      // 设置图表的基本配置项，包括x轴（类别轴）、y轴（数值轴）和折线图系列数据\n      this.chartOptions = {\n        xAxis: {\n          type: 'category',\n          // x轴类型为分类轴\n          data: this.categories // x轴数据来自this.categories\n        },\n        yAxis: {\n          type: 'value' // y轴类型为数值轴\n        },\n        series: [{\n          // 折线图系列数据\n          data: this.values,\n          type: 'line' // 图表类型为折线图\n        }]\n      };\n\n      // 设置ECharts实例的配置选项并更新图表\n      this.chartInstance.setOption(this.chartOptions);\n    }\n  }\n};","map":{"version":3,"names":["echarts","axios","name","data","chartInstance","chartOptions","categories","values","mounted","fetchData","methods","response","get","initChart","error","console","init","$refs","chart","xAxis","type","yAxis","series","setOption"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\views\\Echartsdemo.vue"],"sourcesContent":["<template>\r\n  <!-- Vue组件模板 -->\r\n  <div id=\"app\">\r\n    <!-- 定义一个div作为ECharts图表容器，通过ref属性绑定到Vue实例上 -->\r\n    <div ref=\"chart\" style=\"width: 100%; height: 400px;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 导入ECharts库和Axios库\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\n\r\n// 定义Vue组件\r\nexport default {\r\n  // 给组件命名\r\n  name: 'LineChartComponent',\r\n\r\n  // 初始化组件状态数据\r\n  data() {\r\n    return {\r\n      // 存储ECharts实例的引用\r\n      chartInstance: null,\r\n      // 存储图表配置项\r\n      chartOptions: {},\r\n      // 存储类别标签数据\r\n      categories: [],\r\n      // 存储数值型数据\r\n      values: [],\r\n    };\r\n  },\r\n\r\n  // 在组件挂载完成后执行fetchData方法获取数据\r\n  mounted() {\r\n    this.fetchData();\r\n  },\r\n\r\n  // 定义组件的方法\r\n  methods: {\r\n    // 异步获取数据的方法\r\n    async fetchData() {\r\n      try {\r\n        // 使用Axios发送GET请求到'/api/expimage'接口\r\n        const response = await axios.get('/api/expimage');\r\n\r\n        // 如果请求成功并且返回了有效数据\r\n        if (response.data) {\r\n          // 将接收到的类别数据赋值给categories\r\n          this.categories = response.data.categories;\r\n          // 将接收到的数值数据赋值给values\r\n          this.values = response.data.values;\r\n\r\n          // 数据准备好后初始化并绘制图表\r\n          this.initChart();\r\n        }\r\n      } catch (error) {\r\n        // 如果请求过程中发生错误，打印错误信息\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    },\r\n\r\n    // 初始化并设置ECharts图表的方法\r\n    initChart() {\r\n      // 使用ECharts初始化图表实例，传入已绑定的DOM元素ref=\"chart\"\r\n      this.chartInstance = echarts.init(this.$refs.chart);\r\n\r\n      // 设置图表的基本配置项，包括x轴（类别轴）、y轴（数值轴）和折线图系列数据\r\n      this.chartOptions = {\r\n        xAxis: {\r\n          type: 'category', // x轴类型为分类轴\r\n          data: this.categories, // x轴数据来自this.categories\r\n        },\r\n        yAxis: {\r\n          type: 'value', // y轴类型为数值轴\r\n        },\r\n        series: [\r\n          {\r\n            // 折线图系列数据\r\n            data: this.values, \r\n            type: 'line', // 图表类型为折线图\r\n          },\r\n        ],\r\n      };\r\n\r\n      // 设置ECharts实例的配置选项并更新图表\r\n      this.chartInstance.setOption(this.chartOptions);\r\n    },\r\n  },\r\n};\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* CSS样式部分，只针对本组件内部生效 */\r\n#app {\r\n  /* 中心垂直和水平居中布局 */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* 组件高度充满整个视窗 */\r\n  height: 100vh;\r\n}\r\n</style>"],"mappings":"AASA;AACA,OAAO,KAAKA,OAAM,MAAO,SAAS;AAClC,OAAOC,KAAI,MAAO,OAAO;;AAEzB;AACA,eAAe;EACb;EACAC,IAAI,EAAE,oBAAoB;EAE1B;EACAC,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,aAAa,EAAE,IAAI;MACnB;MACAC,YAAY,EAAE,CAAC,CAAC;MAChB;MACAC,UAAU,EAAE,EAAE;MACd;MACAC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EAED;EACAC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC;EAED;EACAC,OAAO,EAAE;IACP;IACA,MAAMD,SAASA,CAAA,EAAG;MAChB,IAAI;QACF;QACA,MAAME,QAAO,GAAI,MAAMV,KAAK,CAACW,GAAG,CAAC,eAAe,CAAC;;QAEjD;QACA,IAAID,QAAQ,CAACR,IAAI,EAAE;UACjB;UACA,IAAI,CAACG,UAAS,GAAIK,QAAQ,CAACR,IAAI,CAACG,UAAU;UAC1C;UACA,IAAI,CAACC,MAAK,GAAII,QAAQ,CAACR,IAAI,CAACI,MAAM;;UAElC;UACA,IAAI,CAACM,SAAS,CAAC,CAAC;QAClB;MACF,EAAE,OAAOC,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED;IACAD,SAASA,CAAA,EAAG;MACV;MACA,IAAI,CAACT,aAAY,GAAIJ,OAAO,CAACgB,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC;;MAEnD;MACA,IAAI,CAACb,YAAW,GAAI;QAClBc,KAAK,EAAE;UACLC,IAAI,EAAE,UAAU;UAAE;UAClBjB,IAAI,EAAE,IAAI,CAACG,UAAU,CAAE;QACzB,CAAC;QACDe,KAAK,EAAE;UACLD,IAAI,EAAE,OAAO,CAAE;QACjB,CAAC;QACDE,MAAM,EAAE,CACN;UACE;UACAnB,IAAI,EAAE,IAAI,CAACI,MAAM;UACjBa,IAAI,EAAE,MAAM,CAAE;QAChB,CAAC;MAEL,CAAC;;MAED;MACA,IAAI,CAAChB,aAAa,CAACmB,SAAS,CAAC,IAAI,CAAClB,YAAY,CAAC;IACjD;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}