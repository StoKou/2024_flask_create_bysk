{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-77805713\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  ref: \"chart\",\n  style: {\n    \"width\": \"100%\",\n    \"height\": \"400px\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Vue组件模板 \"), _createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" 定义一个div作为ECharts图表容器，通过ref属性绑定到Vue实例上 \"), _createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["id","ref","style","_createElementBlock","_Fragment","_createCommentVNode","_createElementVNode","_hoisted_1","_hoisted_2"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\views\\Echartsdemo.vue"],"sourcesContent":["<template>\r\n  <!-- Vue组件模板 -->\r\n  <div id=\"app\">\r\n    <!-- 定义一个div作为ECharts图表容器，通过ref属性绑定到Vue实例上 -->\r\n    <div ref=\"chart\" style=\"width: 100%; height: 400px;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 导入ECharts库和Axios库\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\n\r\n// 定义Vue组件\r\nexport default {\r\n  // 给组件命名\r\n  name: 'LineChartComponent',\r\n\r\n  // 初始化组件状态数据\r\n  data() {\r\n    return {\r\n      // 存储ECharts实例的引用\r\n      chartInstance: null,\r\n      // 存储图表配置项\r\n      chartOptions: {},\r\n      // 存储类别标签数据\r\n      categories: [],\r\n      // 存储数值型数据\r\n      values: [],\r\n    };\r\n  },\r\n\r\n  // 在组件挂载完成后执行fetchData方法获取数据\r\n  mounted() {\r\n    this.fetchData();\r\n  },\r\n\r\n  // 定义组件的方法\r\n  methods: {\r\n    // 异步获取数据的方法\r\n    async fetchData() {\r\n      try {\r\n        // 使用Axios发送GET请求到'/api/expimage'接口\r\n        const response = await axios.get('/api/expimage');\r\n\r\n        // 如果请求成功并且返回了有效数据\r\n        if (response.data) {\r\n          // 将接收到的类别数据赋值给categories\r\n          this.categories = response.data.categories;\r\n          // 将接收到的数值数据赋值给values\r\n          this.values = response.data.values;\r\n\r\n          // 数据准备好后初始化并绘制图表\r\n          this.initChart();\r\n        }\r\n      } catch (error) {\r\n        // 如果请求过程中发生错误，打印错误信息\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    },\r\n\r\n    // 初始化并设置ECharts图表的方法\r\n    initChart() {\r\n      // 使用ECharts初始化图表实例，传入已绑定的DOM元素ref=\"chart\"\r\n      this.chartInstance = echarts.init(this.$refs.chart);\r\n\r\n      // 设置图表的基本配置项，包括x轴（类别轴）、y轴（数值轴）和折线图系列数据\r\n      this.chartOptions = {\r\n        xAxis: {\r\n          type: 'category', // x轴类型为分类轴\r\n          data: this.categories, // x轴数据来自this.categories\r\n        },\r\n        yAxis: {\r\n          type: 'value', // y轴类型为数值轴\r\n        },\r\n        series: [\r\n          {\r\n            // 折线图系列数据\r\n            data: this.values, \r\n            type: 'line', // 图表类型为折线图\r\n          },\r\n        ],\r\n      };\r\n\r\n      // 设置ECharts实例的配置选项并更新图表\r\n      this.chartInstance.setOption(this.chartOptions);\r\n    },\r\n  },\r\n};\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* CSS样式部分，只针对本组件内部生效 */\r\n#app {\r\n  /* 中心垂直和水平居中布局 */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* 组件高度充满整个视窗 */\r\n  height: 100vh;\r\n}\r\n</style>"],"mappings":";;;EAEOA,EAAE,EAAC;AAAK;;EAENC,GAAG,EAAC,OAAO;EAACC,KAAmC,EAAnC;IAAA;IAAA;EAAA;;;uBAJrBC,mBAAA,CAAAC,SAAA,SACEC,mBAAA,aAAgB,EAChBC,mBAAA,CAGM,OAHNC,UAGM,GAFJF,mBAAA,2CAA8C,EAC9CC,mBAAA,CAA2D,OAA3DE,UAA2D,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}