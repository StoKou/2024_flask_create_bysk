{"ast":null,"code":"import { ref, onMounted, onBeforeUnmount } from 'vue';\nimport * as echarts from 'echarts';\nimport axios from 'axios';\nexport default {\n  name: 'EchartsDemo',\n  setup() {\n    const chartContainerRef = ref(null); // 外部容器的ref\n    let chartInstance = null;\n    const loading = ref(true);\n    const data = ref({\n      categories: [],\n      values: []\n    });\n    const chartOptions = ref({});\n    async function fetchData() {\n      try {\n        const response = await axios.get('/api/expimage');\n        data.value.categories = response.data.categories;\n        data.value.values = response.data.values;\n        chartOptions.value = {\n          xAxis: {\n            type: 'category',\n            data: data.value.categories\n          },\n          yAxis: {\n            type: 'value'\n          },\n          series: [{\n            data: data.value.values,\n            type: 'line'\n          }]\n        };\n        loading.value = false;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        loading.value = false;\n      }\n    }\n    onMounted(async () => {\n      fetchData();\n\n      // 使用 $refs.echart 作为图表容器\n      chartInstance = echarts.init(chartContainerRef.value.querySelector('[ref=\"echart\"]'));\n      chartInstance.setOption(chartOptions.value);\n      window.addEventListener('resize', () => {\n        if (chartInstance) {\n          chartInstance.resize();\n        }\n      });\n    });\n    onBeforeUnmount(() => {\n      if (chartInstance) {\n        chartInstance.resize(); // 在卸载前进行最后一次resize\n        chartInstance.dispose();\n        window.removeEventListener('resize', () => {});\n      }\n    });\n    return {\n      chartContainerRef,\n      loading\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","echarts","axios","name","setup","chartContainerRef","chartInstance","loading","data","categories","values","chartOptions","fetchData","response","get","value","xAxis","type","yAxis","series","error","console","init","querySelector","setOption","window","addEventListener","resize","dispose","removeEventListener"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\components\\Echartsdemo.vue"],"sourcesContent":["<template>\r\n  <div ref=\"chartContainer\" :style=\"{width: '100%', height: '400px'}\">\r\n    <div v-if=\"loading\">Loading...</div>\r\n    <div v-else ref=\"echart\" :style=\"{width: '100%', height: '400px'}\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'EchartsDemo',\r\n  setup() {\r\n    const chartContainerRef = ref(null); // 外部容器的ref\r\n    let chartInstance = null;\r\n\r\n    const loading = ref(true);\r\n    const data = ref({\r\n      categories: [],\r\n      values: [],\r\n    });\r\n    const chartOptions = ref({});\r\n\r\n    async function fetchData() {\r\n      try {\r\n        const response = await axios.get('/api/expimage');\r\n        data.value.categories = response.data.categories;\r\n        data.value.values = response.data.values;\r\n\r\n        chartOptions.value = {\r\n          xAxis: {\r\n            type: 'category',\r\n            data: data.value.categories\r\n          },\r\n          yAxis: {\r\n            type: 'value'\r\n          },\r\n          series: [{\r\n            data: data.value.values,\r\n            type: 'line'\r\n          }]\r\n        };\r\n\r\n        loading.value = false;\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        loading.value = false;\r\n      }\r\n    }\r\n\r\n    onMounted(async () => {\r\n      fetchData();\r\n\r\n      // 使用 $refs.echart 作为图表容器\r\n      chartInstance = echarts.init(chartContainerRef.value.querySelector('[ref=\"echart\"]'));\r\n\r\n      chartInstance.setOption(chartOptions.value);\r\n\r\n      window.addEventListener('resize', () => {\r\n        if (chartInstance) {\r\n          chartInstance.resize();\r\n        }\r\n      });\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      if (chartInstance) {\r\n        chartInstance.resize(); // 在卸载前进行最后一次resize\r\n        chartInstance.dispose();\r\n        window.removeEventListener('resize', () => {});\r\n      }\r\n    });\r\n\r\n    return {\r\n      chartContainerRef,\r\n      loading\r\n    };\r\n  }\r\n};\r\n</script>"],"mappings":"AAQA,SAASA,GAAG,EAAEC,SAAS,EAAEC,eAAc,QAAS,KAAK;AACrD,OAAO,KAAKC,OAAM,MAAO,SAAS;AAClC,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAKA,CAAA,EAAG;IACN,MAAMC,iBAAgB,GAAIP,GAAG,CAAC,IAAI,CAAC,EAAE;IACrC,IAAIQ,aAAY,GAAI,IAAI;IAExB,MAAMC,OAAM,GAAIT,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMU,IAAG,GAAIV,GAAG,CAAC;MACfW,UAAU,EAAE,EAAE;MACdC,MAAM,EAAE;IACV,CAAC,CAAC;IACF,MAAMC,YAAW,GAAIb,GAAG,CAAC,CAAC,CAAC,CAAC;IAE5B,eAAec,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMX,KAAK,CAACY,GAAG,CAAC,eAAe,CAAC;QACjDN,IAAI,CAACO,KAAK,CAACN,UAAS,GAAII,QAAQ,CAACL,IAAI,CAACC,UAAU;QAChDD,IAAI,CAACO,KAAK,CAACL,MAAK,GAAIG,QAAQ,CAACL,IAAI,CAACE,MAAM;QAExCC,YAAY,CAACI,KAAI,GAAI;UACnBC,KAAK,EAAE;YACLC,IAAI,EAAE,UAAU;YAChBT,IAAI,EAAEA,IAAI,CAACO,KAAK,CAACN;UACnB,CAAC;UACDS,KAAK,EAAE;YACLD,IAAI,EAAE;UACR,CAAC;UACDE,MAAM,EAAE,CAAC;YACPX,IAAI,EAAEA,IAAI,CAACO,KAAK,CAACL,MAAM;YACvBO,IAAI,EAAE;UACR,CAAC;QACH,CAAC;QAEDV,OAAO,CAACQ,KAAI,GAAI,KAAK;MACvB,EAAE,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5Cb,OAAO,CAACQ,KAAI,GAAI,KAAK;MACvB;IACF;IAEAhB,SAAS,CAAC,YAAY;MACpBa,SAAS,CAAC,CAAC;;MAEX;MACAN,aAAY,GAAIL,OAAO,CAACqB,IAAI,CAACjB,iBAAiB,CAACU,KAAK,CAACQ,aAAa,CAAC,gBAAgB,CAAC,CAAC;MAErFjB,aAAa,CAACkB,SAAS,CAACb,YAAY,CAACI,KAAK,CAAC;MAE3CU,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,MAAM;QACtC,IAAIpB,aAAa,EAAE;UACjBA,aAAa,CAACqB,MAAM,CAAC,CAAC;QACxB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF3B,eAAe,CAAC,MAAM;MACpB,IAAIM,aAAa,EAAE;QACjBA,aAAa,CAACqB,MAAM,CAAC,CAAC,EAAE;QACxBrB,aAAa,CAACsB,OAAO,CAAC,CAAC;QACvBH,MAAM,CAACI,mBAAmB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;MAChD;IACF,CAAC,CAAC;IAEF,OAAO;MACLxB,iBAAiB;MACjBE;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}