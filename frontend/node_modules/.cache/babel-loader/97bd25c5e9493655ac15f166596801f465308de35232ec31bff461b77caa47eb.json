{"ast":null,"code":"import { ref } from 'vue';\nexport default {\n  name: 'PredictPage',\n  setup() {\n    const fileInput = ref(null);\n    const loading = ref(false);\n    const result = ref('');\n    const selectedModel = ref('model1');\n    const onFileChange = event => {\n      // Simulate storing the selected file\n      const selectedFile = event.target.files[0];\n      console.log('Selected file:', selectedFile.name);\n    };\n    async function handleFormSubmit() {\n      loading.value = true;\n      try {\n        // Simulate prediction based on the selected model\n        const simulatedResult = `Simulated prediction for ${selectedModel.value} using uploaded file`;\n        result.value = JSON.stringify(simulatedResult, null, 2);\n\n        // Artificial delay to simulate API request latency\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        loading.value = false;\n      } catch (error) {\n        console.error(`Error simulating prediction using ${selectedModel.value}:`, error);\n        loading.value = false;\n        alert('模拟预测失败，请检查上传的文件格式或稍后再试...');\n      }\n    }\n    return {\n      fileInput,\n      loading,\n      result,\n      handleFormSubmit,\n      onFileChange,\n      selectedModel\n    };\n  }\n};","map":{"version":3,"names":["ref","name","setup","fileInput","loading","result","selectedModel","onFileChange","event","selectedFile","target","files","console","log","handleFormSubmit","value","simulatedResult","JSON","stringify","Promise","resolve","setTimeout","error","alert"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\components\\PredictPage.vue"],"sourcesContent":["<!-- predict.vue -->\r\n<template>\r\n  <div class=\"predict-page\">\r\n    <header>\r\n      <h1>实验数据预测</h1>\r\n    </header>\r\n    <section class=\"predict-content\">\r\n      <form @submit.prevent=\"handleFormSubmit\">\r\n        <input type=\"file\" ref=\"fileInput\" @change=\"onFileChange\" />\r\n        <label>\r\n          <input type=\"radio\" name=\"model\" value=\"model1\" v-model=\"selectedModel\" /> Model 1\r\n        </label>\r\n        <label>\r\n          <input type=\"radio\" name=\"model\" value=\"model2\" v-model=\"selectedModel\" /> Model 2\r\n        </label>\r\n        <button type=\"submit\">确定</button>\r\n      </form>\r\n      <div v-if=\"loading\">\r\n        <p>正在模拟预测...</p>\r\n      </div>\r\n      <div v-if=\"result && !loading\">\r\n        <h3>模拟预测结果：</h3>\r\n        <pre>{{ result }}</pre>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\n\r\nexport default {\r\n  name: 'PredictPage',\r\n  setup() {\r\n    const fileInput = ref(null);\r\n    const loading = ref(false);\r\n    const result = ref('');\r\n    const selectedModel = ref('model1');\r\n\r\n    const onFileChange = (event) => {\r\n      // Simulate storing the selected file\r\n      const selectedFile = event.target.files[0];\r\n      console.log('Selected file:', selectedFile.name);\r\n    };\r\n\r\n    async function handleFormSubmit() {\r\n      loading.value = true;\r\n\r\n      try {\r\n        // Simulate prediction based on the selected model\r\n        const simulatedResult = `Simulated prediction for ${selectedModel.value} using uploaded file`;\r\n        result.value = JSON.stringify(simulatedResult, null, 2);\r\n\r\n        // Artificial delay to simulate API request latency\r\n        await new Promise((resolve) => setTimeout(resolve, 2000));\r\n\r\n        loading.value = false;\r\n      } catch (error) {\r\n        console.error(`Error simulating prediction using ${selectedModel.value}:`, error);\r\n        loading.value = false;\r\n        alert('模拟预测失败，请检查上传的文件格式或稍后再试...');\r\n      }\r\n    }\r\n\r\n    return {\r\n      fileInput,\r\n      loading,\r\n      result,\r\n      handleFormSubmit,\r\n      onFileChange,\r\n      selectedModel,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.predict-page {\r\n  /* 样式代码 */\r\n}\r\n</style>"],"mappings":"AA6BA,SAASA,GAAE,QAAS,KAAK;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,KAAKA,CAAA,EAAG;IACN,MAAMC,SAAQ,GAAIH,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAMI,OAAM,GAAIJ,GAAG,CAAC,KAAK,CAAC;IAC1B,MAAMK,MAAK,GAAIL,GAAG,CAAC,EAAE,CAAC;IACtB,MAAMM,aAAY,GAAIN,GAAG,CAAC,QAAQ,CAAC;IAEnC,MAAMO,YAAW,GAAKC,KAAK,IAAK;MAC9B;MACA,MAAMC,YAAW,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAC1CC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,YAAY,CAACR,IAAI,CAAC;IAClD,CAAC;IAED,eAAea,gBAAgBA,CAAA,EAAG;MAChCV,OAAO,CAACW,KAAI,GAAI,IAAI;MAEpB,IAAI;QACF;QACA,MAAMC,eAAc,GAAK,4BAA2BV,aAAa,CAACS,KAAK,sBAAsB;QAC7FV,MAAM,CAACU,KAAI,GAAIE,IAAI,CAACC,SAAS,CAACF,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;;QAEvD;QACA,MAAM,IAAIG,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;QAEzDhB,OAAO,CAACW,KAAI,GAAI,KAAK;MACvB,EAAE,OAAOO,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAE,qCAAoChB,aAAa,CAACS,KAAM,GAAE,EAAEO,KAAK,CAAC;QACjFlB,OAAO,CAACW,KAAI,GAAI,KAAK;QACrBQ,KAAK,CAAC,2BAA2B,CAAC;MACpC;IACF;IAEA,OAAO;MACLpB,SAAS;MACTC,OAAO;MACPC,MAAM;MACNS,gBAAgB;MAChBP,YAAY;MACZD;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}