{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chartContainer\",\n  style: {\n    width: '100%',\n    height: '400px'\n  }\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  ref: \"echart\",\n  style: {\n    width: '100%',\n    height: '100%'\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"Loading...\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","style","width","height","key","_createElementBlock","_hoisted_1","$setup","loading","_hoisted_2","_createCommentVNode","_createElementVNode","_hoisted_3"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\components\\Echartsdemo.vue"],"sourcesContent":["<template>\r\n  <div ref=\"chartContainer\" :style=\"{ width: '100%', height: '400px' }\">\r\n    <div v-if=\"loading\">Loading...</div>\r\n<div ref=\"echart\" :style=\"{ width: '100%', height: '100%' }\"></div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onBeforeUnmount, nextTick } from \"vue\";\r\nimport * as echarts from \"echarts\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"EchartsDemo\",\r\n  setup() {\r\n    const chartContainerRef = ref(null);\r\n    const echartInstanceRef = ref(null);\r\n    let chartInstance = null;\r\n\r\n    const loading = ref(true);\r\n    const data = ref({\r\n      categories: [],\r\n      values: [],\r\n    });\r\n    const chartOptions = ref({});\r\n\r\n    async function fetchData() {\r\n      try {\r\n        const response = await axios.get(\"/api/expimage\");\r\n        data.value.categories = response.data.categories;\r\n        data.value.values = response.data.values;\r\n\r\n        chartOptions.value = {\r\n          xAxis: {\r\n            type: \"category\",\r\n            data: data.value.categories,\r\n          },\r\n          yAxis: {\r\n            type: \"value\",\r\n          },\r\n          series: [\r\n            {\r\n              data: data.value.values,\r\n              type: \"line\",\r\n            },\r\n          ],\r\n        };\r\n\r\n        loading.value = false;\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        loading.value = false;\r\n      }\r\n    }\r\n\r\n    onMounted(async () => {\r\n      await fetchData();\r\n      await nextTick();\r\n\r\n      // 确保DOM已渲染完成\r\n      if (chartContainerRef.value && echartInstanceRef.value) {\r\n        try {\r\n          chartInstance = echarts.init(echartInstanceRef.value);\r\n          console.log(\"ECharts instance initialized:\", chartInstance); // 调试输出确认实例化成功\r\n\r\n          chartInstance.setOption(chartOptions.value);\r\n          console.log(\"Chart options set:\", chartOptions.value); // 调试输出确认选项设置\r\n          // 设置完option后检查实例状态并尝试重新绘制\r\n          chartInstance.setOption(chartOptions.value);\r\n          console.log(\r\n            \"ECharts instance after setOption:\",\r\n            chartInstance.getOption()\r\n          ); // 查看当前选项是否正确应用\r\n          chartInstance.resize(); // 强制图表重绘\r\n\r\n          // 或者检查实例是否存在\r\n          if (chartInstance && !chartInstance.isDisposed()) {\r\n            console.log(\"ECharts instance is valid and not disposed.\");\r\n            chartInstance.resize();\r\n          } else {\r\n            console.error(\r\n              \"ECharts instance is either invalid or has been disposed.\"\r\n            );\r\n          }\r\n          window.addEventListener(\"resize\", () => {\r\n            if (chartInstance) {\r\n              chartInstance.resize();\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.error(\r\n            \"Error initializing ECharts or setting options:\",\r\n            error\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      if (chartInstance) {\r\n        chartInstance.resize();\r\n        chartInstance.dispose();\r\n        window.removeEventListener(\"resize\", () => {});\r\n      }\r\n    });\r\n\r\n    return {\r\n      chartContainerRef,\r\n      echartInstanceRef,\r\n      loading,\r\n    };\r\n  },\r\n};\r\n</script>"],"mappings":";;EACOA,GAAG,EAAC,gBAAgB;EAAEC,KAAK,EAAE;IAAAC,KAAA;IAAAC,MAAA;EAAA;;;EADpCC,GAAA;AAAA;;EAGKJ,GAAG,EAAC,QAAQ;EAAEC,KAAK,EAAE;IAAAC,KAAA;IAAAC,MAAA;EAAA;;;uBAFxBE,mBAAA,CAIM,OAJNC,UAIM,GAHOC,MAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAAoC,OAFxCI,UAAA,EAEwB,YAAU,KAFlCC,mBAAA,gBAGAC,mBAAA,CAAmE,OAAnEC,UAAmE,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}