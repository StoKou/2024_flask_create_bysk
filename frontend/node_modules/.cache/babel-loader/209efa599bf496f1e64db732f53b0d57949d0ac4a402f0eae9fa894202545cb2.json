{"ast":null,"code":"import * as echarts from 'echarts';\nimport axios from 'axios';\nexport default {\n  name: 'EchartsDemo',\n  components: {\n    echart: {\n      props: ['options'],\n      functional: true,\n      render(h) {\n        return h('div', {\n          style: {\n            width: '100%',\n            height: '400px'\n          },\n          ref: 'chart'\n        });\n      },\n      mounted() {\n        echarts.init(this.$el).setOption(this.options);\n        window.addEventListener('resize', () => {\n          if (this.$refs.chart) {\n            echarts.getInstanceByDom(this.$refs.chart).resize();\n          }\n        });\n      },\n      beforeDestroy() {\n        const chartInstance = echarts.getInstanceByDom(this.$refs.chart);\n        if (chartInstance) {\n          chartInstance.dispose();\n          window.removeEventListener('resize', () => {});\n        }\n      }\n    }\n  },\n  data() {\n    return {\n      loading: true,\n      data: {\n        categories: [],\n        values: []\n      },\n      chartOptions: {}\n    };\n  },\n  async created() {\n    try {\n      const response = await axios.get('/your-api-url');\n      this.data.categories = response.data.categories; // 假设categories字段包含时间数据\n      this.data.values = response.data.values; // 假设values字段包含数值数据\n\n      this.chartOptions = {\n        xAxis: {\n          type: 'category',\n          data: this.data.categories\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          data: this.data.values,\n          type: 'line'\n        }]\n      };\n      this.loading = false;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      this.loading = false;\n    }\n  }\n};","map":{"version":3,"names":["echarts","axios","name","components","echart","props","functional","render","h","style","width","height","ref","mounted","init","$el","setOption","options","window","addEventListener","$refs","chart","getInstanceByDom","resize","beforeDestroy","chartInstance","dispose","removeEventListener","data","loading","categories","values","chartOptions","created","response","get","xAxis","type","yAxis","series","error","console"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\components\\Echartsdemo.vue"],"sourcesContent":["<template>\r\n  <div ref=\"chart\" :style=\"{width: '100%', height: '400px'}\">\r\n    <div v-if=\"loading\">Loading...</div>\r\n    <div v-else>\r\n      <echart :options=\"chartOptions\" ref=\"echart\"></echart>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'EchartsDemo',\r\n  components: {\r\n    echart: {\r\n      props: ['options'],\r\n      functional: true,\r\n      render(h) {\r\n        return h('div', {\r\n          style: { width: '100%', height: '400px' },\r\n          ref: 'chart'\r\n        });\r\n      },\r\n      mounted() {\r\n        echarts.init(this.$el).setOption(this.options);\r\n        window.addEventListener('resize', () => {\r\n          if (this.$refs.chart) {\r\n            echarts.getInstanceByDom(this.$refs.chart).resize();\r\n          }\r\n        });\r\n      },\r\n      beforeDestroy() {\r\n        const chartInstance = echarts.getInstanceByDom(this.$refs.chart);\r\n        if (chartInstance) {\r\n          chartInstance.dispose();\r\n          window.removeEventListener('resize', () => {});\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      loading: true,\r\n      data: {\r\n        categories: [],\r\n        values: [],\r\n      },\r\n      chartOptions: {}\r\n    };\r\n  },\r\n  async created() {\r\n    try {\r\n      const response = await axios.get('/your-api-url');\r\n      this.data.categories = response.data.categories; // 假设categories字段包含时间数据\r\n      this.data.values = response.data.values; // 假设values字段包含数值数据\r\n\r\n      this.chartOptions = {\r\n        xAxis: {\r\n          type: 'category',\r\n          data: this.data.categories\r\n        },\r\n        yAxis: {\r\n          type: 'value'\r\n        },\r\n        series: [{\r\n          data: this.data.values,\r\n          type: 'line'\r\n        }]\r\n      };\r\n\r\n      this.loading = false;\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      this.loading = false;\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":"AAUA,OAAO,KAAKA,OAAM,MAAO,SAAS;AAClC,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,UAAU,EAAE;IACVC,MAAM,EAAE;MACNC,KAAK,EAAE,CAAC,SAAS,CAAC;MAClBC,UAAU,EAAE,IAAI;MAChBC,MAAMA,CAACC,CAAC,EAAE;QACR,OAAOA,CAAC,CAAC,KAAK,EAAE;UACdC,KAAK,EAAE;YAAEC,KAAK,EAAE,MAAM;YAAEC,MAAM,EAAE;UAAQ,CAAC;UACzCC,GAAG,EAAE;QACP,CAAC,CAAC;MACJ,CAAC;MACDC,OAAOA,CAAA,EAAG;QACRb,OAAO,CAACc,IAAI,CAAC,IAAI,CAACC,GAAG,CAAC,CAACC,SAAS,CAAC,IAAI,CAACC,OAAO,CAAC;QAC9CC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,MAAM;UACtC,IAAI,IAAI,CAACC,KAAK,CAACC,KAAK,EAAE;YACpBrB,OAAO,CAACsB,gBAAgB,CAAC,IAAI,CAACF,KAAK,CAACC,KAAK,CAAC,CAACE,MAAM,CAAC,CAAC;UACrD;QACF,CAAC,CAAC;MACJ,CAAC;MACDC,aAAaA,CAAA,EAAG;QACd,MAAMC,aAAY,GAAIzB,OAAO,CAACsB,gBAAgB,CAAC,IAAI,CAACF,KAAK,CAACC,KAAK,CAAC;QAChE,IAAII,aAAa,EAAE;UACjBA,aAAa,CAACC,OAAO,CAAC,CAAC;UACvBR,MAAM,CAACS,mBAAmB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;QAChD;MACF;IACF;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,IAAI;MACbD,IAAI,EAAE;QACJE,UAAU,EAAE,EAAE;QACdC,MAAM,EAAE;MACV,CAAC;MACDC,YAAY,EAAE,CAAC;IACjB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACF,MAAMC,QAAO,GAAI,MAAMjC,KAAK,CAACkC,GAAG,CAAC,eAAe,CAAC;MACjD,IAAI,CAACP,IAAI,CAACE,UAAS,GAAII,QAAQ,CAACN,IAAI,CAACE,UAAU,EAAE;MACjD,IAAI,CAACF,IAAI,CAACG,MAAK,GAAIG,QAAQ,CAACN,IAAI,CAACG,MAAM,EAAE;;MAEzC,IAAI,CAACC,YAAW,GAAI;QAClBI,KAAK,EAAE;UACLC,IAAI,EAAE,UAAU;UAChBT,IAAI,EAAE,IAAI,CAACA,IAAI,CAACE;QAClB,CAAC;QACDQ,KAAK,EAAE;UACLD,IAAI,EAAE;QACR,CAAC;QACDE,MAAM,EAAE,CAAC;UACPX,IAAI,EAAE,IAAI,CAACA,IAAI,CAACG,MAAM;UACtBM,IAAI,EAAE;QACR,CAAC;MACH,CAAC;MAED,IAAI,CAACR,OAAM,GAAI,KAAK;IACtB,EAAE,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,IAAI,CAACX,OAAM,GAAI,KAAK;IACtB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}