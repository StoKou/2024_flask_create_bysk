{"ast":null,"code":"import NavigationBar from './NavigationBar.vue';\n// 若使用chart.js，需导入相关依赖\n// import Chart from 'chart.js/auto';\n// import { Line } from 'vue-chartjs';\n\nexport default {\n  name: \"HomePage\",\n  components: {\n    NavigationBar\n  },\n  data() {\n    return {\n      activeName: 'second',\n      tableData: [{\n        key: 'A',\n        value: 1\n      }, {\n        key: 'B',\n        value: 2\n      }, {\n        key: 'C',\n        value: 3\n      }, {\n        key: 'D',\n        value: 4\n      }, {\n        key: 'E',\n        value: 5\n      }, {\n        key: 'F',\n        value: 6\n      }, {\n        key: 'G',\n        value: 7\n      }, {\n        key: 'H',\n        value: 8\n      }\n      // 更多数据...\n      ],\n      // 假设这是chart.js所需的图表数据和配置\n      chartData: {\n        labels: [],\n        // X轴标签\n        datasets: [{\n          label: '数据集',\n          data: [] // Y轴数据\n          // 更多配置项...\n        }]\n      },\n      chartOptions: {} // chart.js的图表配置项\n    };\n  },\n  methods: {\n    handleClick(tab, event) {\n      console.log(tab, event);\n    },\n    // 初始化chart.js图表（在mounted钩子函数中调用）\n    initChart() {\n      // 注意：此处仅做示例，实际需要确保已经正确安装和引入chart.js及vue-chartjs\n      // const ctx = this.$refs.chartCanvas.getContext('2d');\n      // const myChart = new Chart(ctx, {\n      //   type: 'line',\n      //   data: this.chartData,\n      //   options: this.chartOptions\n      // });\n    }\n  },\n  mounted() {\n    // 在组件挂载后初始化图表\n    // this.initChart();\n  }\n};","map":{"version":3,"names":["NavigationBar","name","components","data","activeName","tableData","key","value","chartData","labels","datasets","label","chartOptions","methods","handleClick","tab","event","console","log","initChart","mounted"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\views\\Home.vue"],"sourcesContent":["<template>\n  <div>\n    <NavigationBar />\n    <el-tabs type=\"border-card\" v-model=\"activeName\" @tab-click=\"handleClick\">\n      <el-tab-pane label=\"原始数据展示\" name=\"first\">\n        <div>\n          <!-- 使用Element UI的el-table展示二维数据 -->\n          <el-table :data=\"tableData\" style=\"width: 100%\">\n            <el-table-column prop=\"key\" label=\"序号\" width=\"180\"></el-table-column>\n            <el-table-column prop=\"value\" label=\"值\"></el-table-column>\n          </el-table>\n\n          <!-- 假设使用chart.js进行作图，需要先安装chart.js及vue-chartjs插件 -->\n          <canvas ref=\"chartCanvas\" width=\"600\" height=\"400\"></canvas>\n        </div>\n      </el-tab-pane>\n      <el-tab-pane label=\"数据预处理\" name=\"second\"></el-tab-pane>\n      <el-tab-pane label=\"预测结果\" name=\"third\"></el-tab-pane>\n    </el-tabs>\n  </div>\n</template>\n\n<script>\nimport NavigationBar from './NavigationBar.vue';\n// 若使用chart.js，需导入相关依赖\n// import Chart from 'chart.js/auto';\n// import { Line } from 'vue-chartjs';\n\nexport default {\n  name:\"HomePage\",\n  components: {\n    NavigationBar\n  },\n  data() {\n    return {\n      activeName: 'second',\n      tableData: [\n        { key: 'A', value: 1 },\n        { key: 'B', value: 2 },\n        { key: 'C', value: 3 },\n        { key: 'D', value: 4 },\n        { key: 'E', value: 5 },\n        { key: 'F', value: 6 },\n        { key: 'G', value: 7 },\n        { key: 'H', value: 8 },\n        // 更多数据...\n      ],\n      // 假设这是chart.js所需的图表数据和配置\n      chartData: {\n        labels: [], // X轴标签\n        datasets: [{\n          label: '数据集',\n          data: [], // Y轴数据\n          // 更多配置项...\n        }]\n      },\n      chartOptions: {} // chart.js的图表配置项\n    };\n  },\n  methods: {\n    handleClick(tab, event) {\n      console.log(tab, event);\n    },\n    // 初始化chart.js图表（在mounted钩子函数中调用）\n    initChart() {\n      // 注意：此处仅做示例，实际需要确保已经正确安装和引入chart.js及vue-chartjs\n      // const ctx = this.$refs.chartCanvas.getContext('2d');\n      // const myChart = new Chart(ctx, {\n      //   type: 'line',\n      //   data: this.chartData,\n      //   options: this.chartOptions\n      // });\n    }\n  },\n  mounted() {\n    // 在组件挂载后初始化图表\n    // this.initChart();\n  }\n};\n</script>\n\n<style>\n.el-tabs__nav-wrap {\n  display: flex;\n  justify-content: center;\n}\n</style>"],"mappings":"AAuBA,OAAOA,aAAY,MAAO,qBAAqB;AAC/C;AACA;AACA;;AAEA,eAAe;EACbC,IAAI,EAAC,UAAU;EACfC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,QAAQ;MACpBC,SAAS,EAAE,CACT;QAAEC,GAAG,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAE,CAAC,EACtB;QAAED,GAAG,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAE,CAAC,EACtB;QAAED,GAAG,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAE,CAAC,EACtB;QAAED,GAAG,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAE,CAAC,EACtB;QAAED,GAAG,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAE,CAAC,EACtB;QAAED,GAAG,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAE,CAAC,EACtB;QAAED,GAAG,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAE,CAAC,EACtB;QAAED,GAAG,EAAE,GAAG;QAAEC,KAAK,EAAE;MAAE;MACrB;MAAA,CACD;MACD;MACAC,SAAS,EAAE;QACTC,MAAM,EAAE,EAAE;QAAE;QACZC,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,KAAK;UACZR,IAAI,EAAE,EAAE,CAAE;UACV;QACF,CAAC;MACH,CAAC;MACDS,YAAY,EAAE,CAAC,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAACC,GAAG,EAAEC,KAAK,EAAE;MACtBC,OAAO,CAACC,GAAG,CAACH,GAAG,EAAEC,KAAK,CAAC;IACzB,CAAC;IACD;IACAG,SAASA,CAAA,EAAG;MACV;MACA;MACA;MACA;MACA;MACA;MACA;IAAA;EAEJ,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA;EAAA;AAEJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}