{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chart\",\n  style: {\n    width: '100%',\n    height: '400px'\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","style","width","height","_createElementBlock","_hoisted_1"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\components\\Echartsdemo.vue"],"sourcesContent":["<template>\r\n  <div ref=\"chart\" :style=\"{width: '100%', height: '400px'}\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport { fetchData } from '/api/expimage'; // 假设这是你的后端接口文件路径\r\n\r\nexport default {\r\n  name: 'EchartsDemo',\r\n  data() {\r\n    return {\r\n      chartInstance: null,\r\n      options: {},\r\n      dataFromServer: []\r\n    };\r\n  },\r\n  async created() {\r\n    // 异步获取后端数据\r\n    const response = await fetchData();\r\n    this.dataFromServer = response.data; // 假设response.data是一个[{ time, num }]形式的数组\r\n\r\n    // 根据获取到的数据构建ECharts的option\r\n    this.options = {\r\n      xAxis: {\r\n        type: 'category',\r\n        data: this.dataFromServer.map(item => item.time)\r\n      },\r\n      yAxis: {\r\n        type: 'value'\r\n      },\r\n      series: [{\r\n        data: this.dataFromServer.map(item => item.num),\r\n        type: 'line'\r\n      }]\r\n    };\r\n\r\n    // 初始化ECharts实例并在数据获取完成后绘制图表\r\n    this.initChart();\r\n  },\r\n  mounted() {\r\n    // 如果created钩子中还未获取到数据，则在mounted阶段先挂载容器，等待数据加载完成再绘制图表\r\n    if (this.dataFromServer.length > 0) {\r\n      this.initChart();\r\n    }\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      this.chartInstance = echarts.init(this.$refs.chart);\r\n      this.chartInstance.setOption(this.options);\r\n\r\n      window.addEventListener('resize', this.onResize);\r\n    },\r\n    onResize() {\r\n      if (this.chartInstance) {\r\n        this.chartInstance.resize();\r\n      }\r\n    },\r\n    destroyed() {\r\n      window.removeEventListener('resize', this.onResize);\r\n      this.chartInstance.dispose();\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":";;EACOA,GAAG,EAAC,OAAO;EAAEC,KAAK,EAAE;IAAAC,KAAA;IAAAC,MAAA;EAAA;;;uBAAzBC,mBAAA,CAAiE,OAAjEC,UAAiE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}