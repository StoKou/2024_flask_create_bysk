{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"chart\",\n  style: {\n    width: '100%',\n    height: '400px'\n  }\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_echart = _resolveComponent(\"echart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"Loading...\")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode(_component_echart, {\n    options: $data.chartOptions,\n    ref: \"echart\"\n  }, null, 8 /* PROPS */, [\"options\"])]))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","style","width","height","key","_createElementBlock","_hoisted_1","$data","loading","_hoisted_2","_hoisted_3","_createVNode","_component_echart","options","chartOptions"],"sources":["E:\\VsCode\\Vue3\\vue0323\\frontend\\src\\components\\Echartsdemo.vue"],"sourcesContent":["<template>\r\n  <div ref=\"chart\" :style=\"{width: '100%', height: '400px'}\">\r\n    <div v-if=\"loading\">Loading...</div>\r\n    <div v-else>\r\n      <echart :options=\"chartOptions\" ref=\"echart\"></echart>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'EchartsDemo',\r\n  components: {\r\n    echart: {\r\n      props: ['options'],\r\n      functional: true,\r\n      render(h) {\r\n        return h('div', {\r\n          style: { width: '100%', height: '400px' },\r\n          ref: 'chart'\r\n        });\r\n      },\r\n      mounted() {\r\n        echarts.init(this.$el).setOption(this.options);\r\n        window.addEventListener('resize', () => {\r\n          if (this.$refs.chart) {\r\n            echarts.getInstanceByDom(this.$refs.chart).resize();\r\n          }\r\n        });\r\n      },\r\n      beforeDestroy() {\r\n        const chartInstance = echarts.getInstanceByDom(this.$refs.chart);\r\n        if (chartInstance) {\r\n          chartInstance.dispose();\r\n          window.removeEventListener('resize', () => {});\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      loading: true,\r\n      data: {\r\n        categories: [],\r\n        values: [],\r\n      },\r\n      chartOptions: {}\r\n    };\r\n  },\r\n  async created() {\r\n    try {\r\n      const response = await axios.get('/your-api-url');\r\n      this.data.categories = response.data.categories; // 假设categories字段包含时间数据\r\n      this.data.values = response.data.values; // 假设values字段包含数值数据\r\n\r\n      this.chartOptions = {\r\n        xAxis: {\r\n          type: 'category',\r\n          data: this.data.categories\r\n        },\r\n        yAxis: {\r\n          type: 'value'\r\n        },\r\n        series: [{\r\n          data: this.data.values,\r\n          type: 'line'\r\n        }]\r\n      };\r\n\r\n      this.loading = false;\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      this.loading = false;\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":";;EACOA,GAAG,EAAC,OAAO;EAAEC,KAAK,EAAE;IAAAC,KAAA;IAAAC,MAAA;EAAA;;;EAD3BC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;uBACEC,mBAAA,CAKM,OALNC,UAKM,GAJOC,KAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAAoC,OAFxCI,UAAA,EAEwB,YAAU,M,cAC9BJ,mBAAA,CAEM,OALVK,UAAA,GAIMC,YAAA,CAAsDC,iBAAA;IAA7CC,OAAO,EAAEN,KAAA,CAAAO,YAAY;IAAEd,GAAG,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}